%define major_kernelver 3.10
%define minor_kernelver 10
%define pkg_release 1
%define KERNEL_RELEASE %{major_kernelver}.%{minor_kernelver}-%{release}.%{_target_cpu}

Name: kernel-docker
Version: %{major_kernelver}.%{minor_kernelver}
Release: %{pkg_release}
Epoch: 0
Summary: Kernel that supports docker
URL: http://kernel.org
License: GPL
Group: Applications/Databases
BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-root-%(%{__id_u} -n)

Provides: kernel-docker = %{version}-%{release}
Provides: kernel = %{version}-%{release}

BuildRequires: bc
BuildRequires: xz

%define __spec_install_post /usr/lib/rpm/brp-compress || :
%define debug_package %{nil}

Source: linux-3.10.10.tar.xz
Source1: config-docker-3.10.10
Source2: aufs3-standalone-3.10.tar.gz

%description
kernel that supports docker

%package headers
Summary: Headers files used by glibc
Group: Developement/System
Obsoletes: glibc-kernheaders
Provides: glibc-kernheaders = 3.10.10
Provides: kernel-headers = %{version}-%{release}
Provides: kernel-docker-headers = %{version}-%{release}
%description headers
linux header files

%package firmware
Summary: Firmware files used by the linux kernel
Group: Development/System
Provides: kernel-docker-firmware = %{version}-%{release}
Provides: kernel-firmware
%description firmware
kernel-firmware includes firmware files

%package devel
Summary: Development package for building kernel modules
Group: System Environment/Kernel
Provides: kernel-docker-devel = %{version}-%{release}
%description devel
provides kernel headers and makefiles to build modules

%prep
%setup -q -n linux-%{major_kernelver}.%{minor_kernelver}
# There must be a better way to do this with %patch and %setup
cd $RPM_BUILD_DIR
tar -xvzf %{SOURCE2}

patch -d linux-%{major_kernelver}.%{minor_kernelver} -p1 < aufs3-standalone-3.10/aufs3-kbuild.patch
patch -d linux-%{major_kernelver}.%{minor_kernelver} -p1 < aufs3-standalone-3.10/aufs3-base.patch
patch -d linux-%{major_kernelver}.%{minor_kernelver} -p1 < aufs3-standalone-3.10/aufs3-proc_map.patch
patch -d linux-%{major_kernelver}.%{minor_kernelver} -p1 < aufs3-standalone-3.10/aufs3-standalone.patch

rm -rf aufs3-standalone-3.10/include/uapi/linux/Kbuild
cp -r aufs3-standalone-3.10/{Documentation,fs,include} linux-%{major_kernelver}.%{minor_kernelver}

cd linux-%{major_kernelver}.%{minor_kernelver}

make mrproper
#cat $RPM_SOURCE_DIR/config-%{major_kernelver}.%{_target_cpu} >> .config
#cp $RPM_SOURCE_DIR/kernel-config .config
cp %{SOURCE1} .config


%build
perl -p -i -e "s/^EXTRAVERSION.*/EXTRAVERSION = -%{release}.%{_target_cpu}/" Makefile

make oldconfig
make %{?_smp_mflags} bzImage
make %{?_smp_mflags} modules

%install
rm -rf $RPM_BUILD_ROOT

## Create directory structure.
mkdir -p $RPM_BUILD_ROOT/boot
%if 0%{?rhel} == 5
touch $RPM_BUILD_ROOT/boot/initrd-%{KERNEL_RELEASE}.img
%endif
%if 0%{?rhel} == 6
touch $RPM_BUILD_ROOT/boot/initramfs-%{KERNEL_RELEASE}.img
%endif
mkdir -p $RPM_BUILD_ROOT/lib/modules
mkdir -p $RPM_BUILD_ROOT/lib/firmware
mkdir -p $RPM_BUILD_ROOT/usr

# copy across all our modules
make INSTALL_MOD_PATH=$RPM_BUILD_ROOT KBUILD_SRC= modules_install

# create firmware files for the kernel-docker-firmware package
make INSTALL_FW_PATH=$RPM_BUILD_ROOT/lib/firmware firmware_install

# Install kernel headers
make ARCH=x86 INSTALL_HDR_PATH=$RPM_BUILD_ROOT/usr headers_install

# Do headers_check but don't die if it fails.
make ARCH=x86 INSTALL_HDR_PATH=$RPM_BUILD_ROOT/usr headers_check \
     > hdrwarnings.txt || :
if grep -q exist hdrwarnings.txt; then
  sed s:^$RPM_BUILD_ROOT/usr/include/:: hdrwarnings.txt
  # Temporarily cause a build failure if header inconsistencies.
  # exit 1
fi

find $RPM_BUILD_ROOT/usr/include \
  \( -name .install -o -name .check -o \
     -name ..install.cmd -o -name ..check.cmd \) | xargs rm -f

# glibc provides scsi headers for itself, for now
#rm -rf $RPM_BUILD_ROOT/usr/include/scsi
#rm -f $RPM_BUILD_ROOT/usr/include/asm*/atomic.h
#rm -f $RPM_BUILD_ROOT/usr/include/asm*/io.h
#rm -f $RPM_BUILD_ROOT/usr/include/asm*/irq.h

# Manipulate the files how we want them.
cp arch/x86/boot/bzImage $RPM_BUILD_ROOT/boot/vmlinuz-%{KERNEL_RELEASE}
cp System.map $RPM_BUILD_ROOT/boot/System.map-%{KERNEL_RELEASE}
cp .config $RPM_BUILD_ROOT/boot/config-%{KERNEL_RELEASE}
gzip -c9 < Module.symvers > $RPM_BUILD_ROOT/boot/symvers-%{KERNEL_RELEASE}.gz

# mark modules as executable so rpmbuild will strip their debugging symbols
find $RPM_BUILD_ROOT/lib/modules/%{KERNEL_RELEASE} -name "*.ko" -type f | xargs chmod u+x

# remove files that will be auto generated by depmod at rpm -i time
rm -f $RPM_BUILD_ROOT/lib/modules/%{KERNEL_RELEASE}/modules.*
rm -f $RPM_BUILD_ROOT/lib/modules/%{KERNEL_RELEASE}/build
rm -f $RPM_BUILD_ROOT/lib/modules/%{KERNEL_RELEASE}/source

## Gather up all the files we need for our devel package...
mkdir -p $RPM_BUILD_ROOT/usr/src/kernels/%{KERNEL_RELEASE}/
cp --parents `find  -type f -name "Makefile*" -o -name "Kconfig*"` $RPM_BUILD_ROOT/usr/src/kernels/%{KERNEL_RELEASE}/
cp Module.symvers $RPM_BUILD_ROOT/usr/src/kernels/%{KERNEL_RELEASE}/
cp System.map $RPM_BUILD_ROOT/usr/src/kernels/%{KERNEL_RELEASE}/

# then drop all but the needed Makefiles/Kconfig files
rm -rf $RPM_BUILD_ROOT/usr/src/kernels/%{KERNEL_RELEASE}/Documentation
rm -rf $RPM_BUILD_ROOT/usr/src/kernels/%{KERNEL_RELEASE}/scripts
rm -rf $RPM_BUILD_ROOT/usr/src/kernels/%{KERNEL_RELEASE}/include

## Recopy stuff we probably do need.
cp .config $RPM_BUILD_ROOT/usr/src/kernels/%{KERNEL_RELEASE}/
cp -a scripts $RPM_BUILD_ROOT/usr/src/kernels/%{KERNEL_RELEASE}/
if [ -d arch/x86/scripts ]; then
  cp -a arch/x86/scripts $RPM_BUILD_ROOT/usr/src/kernels/%{KERNEL_RELEASE}/arch/x86 || :
fi
if [ -f arch/x86/*lds ]; then
  cp -a arch/x86/*lds $RPM_BUILD_ROOT/usr/src/kernels/%{KERNEL_RELEASE}/arch/x86/ || :
fi
rm -f $RPM_BUILD_ROOT/usr/src/kernels/%{KERNEL_RELEASE}/scripts/*.o
rm -f $RPM_BUILD_ROOT/usr/src/kernels/%{KERNEL_RELEASE}/scripts/*/*.o
if [ -d arch/x86/include ]; then
  cp -a --parents arch/x86/include $RPM_BUILD_ROOT/usr/src/kernels/%{KERNEL_RELEASE}/
fi
mkdir -p $RPM_BUILD_ROOT/usr/src/kernels/%{KERNEL_RELEASE}/include
cd include
#cp -a acpi asm-generic clocksource config crypto drm generated keys linux math-emu media memory misc net pcmcia ras rdma rxrpc scsi sound target trace uapi video xen $RPM_BUILD_ROOT/usr/src/kernels/%{KERNEL_RELEASE}/include
# include it all
cp -a * $RPM_BUILD_ROOT/usr/src/kernels/%{KERNEL_RELEASE}/include

# Make sure the Makefile and version.h have a matching timestamp so that
# external modules can be built
touch -r $RPM_BUILD_ROOT/usr/src/kernels/%{KERNEL_RELEASE}/Makefile $RPM_BUILD_ROOT/usr/src/kernels/%{KERNEL_RELEASE}/include/linux/version.h
touch -r $RPM_BUILD_ROOT/usr/src/kernels/%{KERNEL_RELEASE}/.config $RPM_BUILD_ROOT/usr/src/kernels/%{KERNEL_RELEASE}/include/linux/autoconf.h
# Copy .config to include/config/auto.conf so "make prepare" is unnecessary.
cp $RPM_BUILD_ROOT/usr/src/kernels/%{KERNEL_RELEASE}/.config $RPM_BUILD_ROOT/usr/src/kernels/%{KERNEL_RELEASE}/include/config/auto.conf

# Create links to kernel source....
ln -s /usr/src/kernels/%{KERNEL_RELEASE} $RPM_BUILD_ROOT/lib/modules/%{KERNEL_RELEASE}/build
ln -s /usr/src/kernels/%{KERNEL_RELEASE} $RPM_BUILD_ROOT/lib/modules/%{KERNEL_RELEASE}/source

%post
# Add kernel-xen to the list of packages that allow multiple installs
# so we don't nuke working kernels on an upgrade. That would be bad.
if grep -q installonlypkgs /etc/yum.conf
then
  echo "Detected 'installonlypkgs' option already in /etc/yum.conf. Not modifying!"
else
  sed -i 's/\[main]/[main]\ninstallonlypkgs=kernel kernel-xen kernel-smp kernel-bigmem kernel-enterprise kernel-debug/g' /etc/yum.conf
  echo "Added 'installonlypkgs' line to /etc/yum.conf!"
fi

if [ -x /sbin/new-kernel-pkg ]
then
%if 0%{?rhel} == 5
  /sbin/new-kernel-pkg --package kernel --mkinitrd --depmod --install %{KERNEL_RELEASE} || exit $?
%endif
%if 0%{?rhel} == 6
  /sbin/new-kernel-pkg --package kernel --mkinitrd --dracut --depmod --install %{KERNEL_RELEASE} || exit $?
%endif
fi
if [ -x /sbin/weak-modules ]
then
  /sbin/weak-modules --add-kernel %{KERNEL_RELEASE} || exit $?
fi

%preun
if [ -x /sbin/new-kernel-pkg ]
then
  /sbin/new-kernel-pkg --rminitrd --rmmoddep --remove %{KERNEL_RELEASE} || exit $?
fi
if [ -x /sbin/weak-modules ]
then
  /sbin/weak-modules --remove-kernel %{KERNEL_RELEASE} || exit $?
fi

%clean
[ "$RPM_BUILD_ROOT" != "/" ] && rm -rf $RPM_BUILD_ROOT

%files
%defattr (-, root, root)
#%dir /lib/modules
/lib/modules/%{KERNEL_RELEASE}
/boot/vmlinuz-%{KERNEL_RELEASE}
/boot/System.map-%{KERNEL_RELEASE}
/boot/config-%{KERNEL_RELEASE}
/boot/symvers-%{KERNEL_RELEASE}.gz
%if 0%{?rhel} == 5
/boot/initrd-%{KERNEL_RELEASE}.img
%endif
%if 0%{?rhel} == 6
/boot/initramfs-%{KERNEL_RELEASE}.img
%endif

%files headers
%defattr(-,root,root)
/usr/include/*

%files firmware
%defattr(-,root,root)
/lib/firmware/*

%files devel
%defattr(-,root,root)
/usr/src/kernels/%{KERNEL_RELEASE}/*
/usr/src/kernels/%{KERNEL_RELEASE}/.config

%changelog
* Mon Sep 09 2013 Ben Sanchez <ben@zope.com>
- Initial RPM

